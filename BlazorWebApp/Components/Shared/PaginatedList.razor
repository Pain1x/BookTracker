@typeparam TItem

@if (Items == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @if (Items.Any())
    {
        @foreach (var item in Items)
        {
            @ItemTemplate(item)
        }

        <tr>
            <td colspan="5" class="px-4 py-2">
                <div class="d-flex justify-content-between align-items-center">
                    <PaginationButton Text="Previous"
                                      OnClick="PreviousPage"
                                      Disabled="@(PageIndex == 1)" />
                    <span>Page @PageIndex</span>
                    <PaginationButton Text="Next"
                                      OnClick="NextPage"
                                      Disabled="@(!HasMore)" />
                </div>
            </td>
        </tr>
    }
    else
    {
        <p>No items found.</p>
    }
}

@code {
    [Parameter] public Func<int, int, Task<(List<TItem> Items, int ItemsCount)>>? PageLoader { get; set; }
    [Parameter] public RenderFragment<TItem>? ItemTemplate { get; set; }
    [Parameter] public int PageSize { get; set; } = 10;

    private int PageIndex { get; set; } = 1;
    private bool HasMore { get; set; } = true;
    private List<TItem>? Items { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadItems();
    }

    private async Task LoadItems()
    {
        if (PageLoader == null) return;

        var loadedItems = await PageLoader(PageIndex, PageSize);
        Items = loadedItems.Items;
        HasMore = PageIndex * PageSize < loadedItems.ItemsCount;
    }

    private async Task NextPage()
    {
        PageIndex++;
        await LoadItems();
    }

    private async Task PreviousPage()
    {
        if (PageIndex > 1)
        {
            PageIndex--;
            await LoadItems();
        }
    }
}