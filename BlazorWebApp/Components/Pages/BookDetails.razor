@page "/book/{bookPk:guid}"
@rendermode InteractiveServer
@using BookTracker.BLL.Models
@using BookTracker.BLL.Abstractions
@using BookTracker.Resources
@using Microsoft.Extensions.Localization
@inject IBooksService BooksService
@inject NavigationManager Navigation
@inject IStringLocalizer<ApplicationResources> Localizer

<h3 class="bookdetails-heading">@Localizer[ApplicationResources.BookDetails]</h3>

@if (book == null)
{
    <div class="alert alert-warning">Book not found.</div>
}
else
{
    @if (!isEditing)
    {
        <div class="flex-row-buttons">
            <button class="btn-back-violet" @onclick="GoBack">
                &#8592; @Localizer[ApplicationResources.BackToList]
            </button>
            <button class="btn-violet" @onclick="EnableEdit">
                &#9998; @Localizer[ApplicationResources.Edit]
            </button>
        </div>
        <div class="bookdetails-violet">
            <h4>@book.Title</h4>
            <p><strong>@Localizer[ApplicationResources.Author]:</strong> @book.Author.Name</p>
            <p><strong>@Localizer[ApplicationResources.Genre]:</strong> @book.Genre.Name</p>
            <p><strong>@Localizer[ApplicationResources.DateRead]:</strong> @book.DateReadString</p>
            <p><strong>@Localizer[ApplicationResources.Rating]:</strong> @book.Rating</p>
        </div>
    }
    else
    {
        <EditForm Model="@editBook" OnValidSubmit="HandleEditSubmit" class="bookdetails-violet">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label class="form-label">@Localizer[ApplicationResources.Title]:</label>
                <InputText @bind-Value="editBook.Title" class="form-control" />
            </div>
            <div class="mb-3">
                <label class="form-label">@Localizer[ApplicationResources.Author]:</label>
                <InputText @bind-Value="editBook.Author.Name" class="form-control" />
            </div>
            <div class="mb-3">
                <label class="form-label">@Localizer[ApplicationResources.Genre]:</label>
                <InputText @bind-Value="editBook.Genre.Name" class="form-control" />
            </div>
            <div class="mb-3">
                <label class="form-label">@Localizer[ApplicationResources.DateRead]:</label>
                <InputDate @bind-Value="editBook.DateRead" class="form-control" />
            </div>
            <div class="mb-3">
                <label class="form-label">@Localizer[ApplicationResources.Rating]:</label>
                <InputNumber @bind-Value="editBook.Rating" class="form-control" />
            </div>
            <button type="submit" class="btn-violet">@Localizer[ApplicationResources.Save]</button>
            <button type="button" class="btn btn-outline-secondary ms-2" @onclick="CancelEdit">Cancel</button>
        </EditForm>
    }
}

@code {
    [Parameter] public Guid bookPk { get; set; }
    private BookModel? book;
    private BookModel? editBook;
    private bool isEditing;

    protected override async Task OnInitializedAsync()
    {
        book = await BooksService.FindBookByPk(bookPk);
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/");
    }

    private void EnableEdit()
    {
        if (book != null)
        {
            // Deep copy to avoid editing the original until saved
            editBook = new BookModel
            {
                BookPk = book.BookPk,
                Title = book.Title,
                Author = new AuthorModel { AuthorPk = book.Author.AuthorPk, Name = book.Author.Name },
                Genre = new GenreModel { GenrePk = book.Genre.GenrePk, Name = book.Genre.Name },
                DateRead = book.DateRead,
                Rating = book.Rating
            };
            isEditing = true;
        }
    }

    private async Task HandleEditSubmit()
    {
        if (editBook != null)
        {
            await BooksService.UpdateBook(editBook);
            book = await BooksService.FindBookByPk(bookPk); // Refresh details
            isEditing = false;
        }
    }

    private void CancelEdit()
    {
        isEditing = false;
    }
}