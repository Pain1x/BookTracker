@page "/"
@rendermode InteractiveServer
@using BookTracker.BLL.Abstractions
@using BookTracker.BLL.Models
@using BlazorWebApp.Components.Shared
@inject IBooksService BooksService
@inject NavigationManager Navigation

<h3 class="text-xl font-semibold mb-4">My Books List</h3>

<div class="statbadge-violet d-flex justify-content-end">
	<StatBadge Label="Books read this year" Value="booksReadThisYear" />
	<StatBadge T="int" Label="Books read last 5 years" YearCounts="booksReadLastFiveYears" />
</div>

<button class="btn-violet" @onclick="NavigateToAddBook">
	<span class="oi oi-plus"></span> Add New Book
</button>

<table class="table violet-table">
	<thead>
		<tr>
			<th>Title</th>
			<th>Author</th>
			<th>Genre</th>
			<th>Date Read</th>
			<th>Rating</th>
		</tr>
	</thead>
	<tbody>
		@foreach (var book in PagedBooks)
		{
			<tr style="cursor:pointer" @onclick="() => NavigateToDetails(book.BookPk)">
				<td>@book.Title</td>
				<td>@book.Author.Name</td>
				<td>@book.Genre.Name</td>
				<td>@book.DateReadString</td>
				<td>@book.Rating</td>
			</tr>
		}
	</tbody>
</table>

<div class="d-flex justify-content-center align-items-center my-3">
	<button class="btn-violet-paging" @onclick="PrevPage" disabled="@IsFirstPage">Previous</button>
	<span>Page @CurrentPage of @TotalPages</span>
	<button class="btn-violet-paging" @onclick="NextPage" disabled="@IsLastPage">Next</button>
</div>

@code {
	private List<BookModel> books = new();
	private int booksReadThisYear;
	Dictionary<int, int> booksReadLastFiveYears = new();

	// Paging state
	private int CurrentPage = 1;
	private int PageSize = 10;
	private int TotalPages => (int)Math.Ceiling((double)books.Count / PageSize);

	private IEnumerable<BookModel> PagedBooks =>
		books.Skip((CurrentPage - 1) * PageSize).Take(PageSize);

	private bool IsFirstPage => CurrentPage == 1;
	private bool IsLastPage => CurrentPage == TotalPages || TotalPages == 0;

	protected override async Task OnInitializedAsync()
	{
		books = await BooksService.GetAllBooks();
		booksReadThisYear = await BooksService.CountBooksByYear(DateTime.UtcNow.Year);

		var currentYear = DateTime.UtcNow.Year;
		for (var i = 0; i < 5; i++)
		{
			var year = currentYear - i;
			booksReadLastFiveYears[year] = await BooksService.CountBooksByYear(year);
		}
	}

	private void NavigateToDetails(Guid bookPk)
	{
		Navigation.NavigateTo($"/book/{bookPk}");
	}

	private void NavigateToAddBook()
	{
		Navigation.NavigateTo("/add-book");
	}

	private void PrevPage()
	{
		if (CurrentPage > 1)
			CurrentPage--;
	}

	private void NextPage()
	{
		if (CurrentPage < TotalPages)
			CurrentPage++;
	}
}