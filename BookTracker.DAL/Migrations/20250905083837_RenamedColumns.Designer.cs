// <auto-generated />
using System;
using BookTracker.DAL.DBContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BookTracker.DAL.Migrations
{
    [DbContext(typeof(BooksDbContext))]
    [Migration("20250905083837_RenamedColumns")]
    partial class RenamedColumns
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BookTracker.DAL.Entities.Author", b =>
                {
                    b.Property<Guid>("AuthorPk")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AuthorPk");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("BookTracker.DAL.Entities.Book", b =>
                {
                    b.Property<Guid>("BookPk")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorPk")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("DateRead")
                        .HasColumnType("timestamptz");

                    b.Property<Guid>("GenrePk")
                        .HasColumnType("uuid");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("BookPk");

                    b.HasIndex("AuthorPk");

                    b.HasIndex("GenrePk");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("BookTracker.DAL.Entities.Genre", b =>
                {
                    b.Property<Guid>("GenrePk")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("GenrePk");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("BookTracker.DAL.Entities.Book", b =>
                {
                    b.HasOne("BookTracker.DAL.Entities.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorPk")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BookTracker.DAL.Entities.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenrePk")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Genre");
                });
#pragma warning restore 612, 618
        }
    }
}
